/*!
  @mainpage
  @brief This page contains the readme for the SPI driver, as well as an overview of the source code.<br>

  @section README Readme
  	@brief This section details the intended use of the drivers, and the source code structure.
  	@subsection intended_use Intended Use
  		@details The purpose of these driver examples is to illustrate usage of Adesto flash memory. With these drivers, the user may test many functions available for the supported memory devices. The user may test a plethora of operations including reading, writing, and putting the flash device into various modes. Each family of devices has their own behavior and opcodes.
		<br><br>The current families supported are:
			-# @ref MONETA
			-# @ref FUSION
			-# @ref DATAFLASH
			-# @ref PHOENIX

    @subsection SOURCE_CODE_STRUCTURE Source Code Structure
      @details There are 3 main functional components to this project.
      -# @ref USER_CONFIGURATION_DESCRIPTION
      -# @ref ADESTO_LAYER_DESCRIPTION
      -# @ref SPI_LAYER_DESCRIPTION
  
      Together, these 3 components allow the user to port and test most of the commands available for the implemented devices.\n

      <br><i>User Configuration Layer</i> - This layer has all the factored user configuration and porting options. Using the user_config.h and user_config.c files, the project can quickly be set to work with another Adesto SPI flash device or a different MCU. More information on this is provided in the @ref PORTING_GUIDE.
      
      <br><i>Adesto Layer</i> - This layer stores the various functions and commands for each family of devices available. A user may call these functions in a sequential fashion in their program to send and receieve data from the flash device. The device family appears as the first portion of the camelCase function (ex. monetaReadMID()), and the functionality of that command is evident in the second half of the function name, Read Manufacturing ID in this case. The documentation for each function lists a brief explanation of the function, as well as the actual opcode that's sent to the device. Sending and receiving data is done through the SPI driver, this being the second of the 2 components.

      <br><i>SPI Layer</i> - This layer controls the GPIO pins in order to send and receive data. Communication is done solely through the SPI protocol, although there is a JEDEC reset function bulit into the driver (SPI_JEDECReset()). The user facing functionality of the driver allows the user to send and receive bytes through tx and rx buffers with the SPI_Exchange() function. Currently, the K82 is the only board supported, but the project may be ported to other microcontrollers in the future. Note, the driver must be modified in order to port to another board. A porting guide is included with this documentation.
      
      @image html "project_structure.png"


	@subsection SETUP_AND_USAGE Setup & Usage
  		@details Before using the SPI driver and Adesto layer, the user must hook the ports, pins, and initialization code to the specific MCU being used. All this is done in the SPI layer (spi_driver.h, spi_driver.c). A comprehensive overview of how to port the driver to a generic MCU can be found within this documentation in the @ref PORTING_GUIDE. <br>
      After hooking the SPI layer to a GPIO driver for a specific MCU, the user must define the device being used (see cmd_defs.h). Defining the specific part used 'unlocks' the feature set offered by that device. The comprehensive test included with the code for each family of devices can then be run. If the manufacturing ID cannot be read properly, the setup was a failure.

  @subsection DEBUGGING Debugging
      @details Debugging any issues can be done from the lowest level (examining  waveforms) to the highest (using breakpoints within an IDE). Conveniently included within the SPI and Adesto layers are functions to assist with debugging. Byte comparisons can be easily done with compareByteArrays() (see helper_functions.h), and a fully integrated debug print can be turned on and off with debugOn()/debugOff(). The SPI layer also includes support for a 'trigger' which toggles a GPIO pin through a falling edge SPI_Trigger(). 
*/